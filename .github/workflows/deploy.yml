name: Deploy Portfolio to Production Server

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: photography-portfolio
  SERVER_APP_DIR: /opt/portfolio-app
  SERVICE_NAME: portfolio-app.service

jobs:
  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_uri: ${{ steps.get-primary-tag.outputs.primary_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set lowercase image owner
        run: echo "IMAGE_OWNER_LC=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
        shell: bash
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER_LC }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=,format=short
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Get primary image tag
        id: get-primary-tag
        run: |
          PRIMARY_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)
          echo "primary_tag=$PRIMARY_TAG" >> $GITHUB_OUTPUT
        shell: bash

  deploy-to-server:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build-and-push-image
    environment: production
    steps:
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Prepare Compose File Content
        id: prepare-compose
        run: |
          # Read the multi-line YAML and base64 encode it for safe transmission.
          # The -w 0 flag for base64 prevents line wrapping.
          COMPOSE_CONTENT_B64=$(cat <<EOF | base64 -w 0
          version: "3.8"
          services:
            portfolio-app:
              image: "${{ needs.build-and-push-image.outputs.image_uri }}"
              container_name: portfolio-app
              restart: unless-stopped
              env_file: .env
              ports:
                - "8000:8000"
              networks:
                - portfolio-net
              depends_on:
                - minio
              command: gunicorn --bind 0.0.0.0:8000 "app:create_app()"
            minio:
              image: minio/minio:RELEASE.2024-07-25T09-32-18Z
              container_name: minio-server
              restart: unless-stopped
              env_file: .env
              ports:
                - "9000:9000"
                - "9001:9001"
              volumes:
                - minio-data:/data
              networks:
                - portfolio-net
              command: server /data --console-address ":9001"
          volumes:
            minio-data:
              driver: local
          networks:
            portfolio-net:
              driver: bridge
          EOF
          )
          # Make the base64 variable available to the next job
          echo "compose_file_b64=${COMPOSE_CONTENT_B64}" >> $GITHUB_OUTPUT
      - name: Deploy via SSH
        env:
          TARGET_SSH_HOST: ${{ secrets.SSH_HOST }}
          TARGET_SSH_USER: ${{ secrets.SSH_USER }}
          GHCR_PULL_TOKEN: ${{ secrets.GHCR_PULL_TOKEN }}
          GHCR_USERNAME: ${{ github.repository_owner }}
          MINIO_ROOT_USER: ${{ secrets.MINIO_ROOT_USER }}
          MINIO_ROOT_PASSWORD: ${{ secrets.MINIO_ROOT_PASSWORD }}
          MINIO_BUCKET_NAME: ${{ secrets.MINIO_BUCKET_NAME }}
          # Pass the base64 encoded compose file content from the previous step
          COMPOSE_FILE_B64: ${{ steps.prepare-compose.outputs.compose_file_b64 }}
        run: |
          ssh-keyscan -H "${TARGET_SSH_HOST}" >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no "${TARGET_SSH_USER}@${TARGET_SSH_HOST}" << EOF
            set -ex

            sudo mkdir -p ${{ env.SERVER_APP_DIR }}
            echo "MINIO_ROOT_USER=${MINIO_ROOT_USER}" | sudo tee ${{ env.SERVER_APP_DIR }}/.env > /dev/null
            echo "MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}" | sudo tee -a ${{ env.SERVER_APP_DIR }}/.env > /dev/null
            echo "MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}" | sudo tee -a ${{ env.SERVER_APP_DIR }}/.env > /dev/null
            echo "FLASK_ENV=production" | sudo tee -a ${{ env.SERVER_APP_DIR }}/.env > /dev/null
            sudo chmod 600 ${{ env.SERVER_APP_DIR }}/.env

            # Decode the base64 content and write the compose file. This is the safest method.
            echo "${COMPOSE_FILE_B64}" | base64 -d | sudo tee ${{ env.SERVER_APP_DIR }}/docker-compose.yml > /dev/null

            echo "${GHCR_PULL_TOKEN}" | sudo docker login ghcr.io -u "${GHCR_USERNAME}" --password-stdin

            cd ${{ env.SERVER_APP_DIR }}
            sudo docker compose pull

            echo "[Unit]" | sudo tee /etc/systemd/system/${{ env.SERVICE_NAME }}
            echo "Description=Portfolio App Service" | sudo tee -a /etc/systemd/system/${{ env.SERVICE_NAME }}
            echo "Requires=docker.service" | sudo tee -a /etc/systemd/system/${{ env.SERVICE_NAME }}
            echo "After=docker.service network.target" | sudo tee -a /etc/systemd/system/${{ env.SERVICE_NAME }}
            echo "[Service]" | sudo tee -a /etc/systemd/system/${{ env.SERVICE_NAME }}
            echo "WorkingDirectory=${{ env.SERVER_APP_DIR }}" | sudo tee -a /etc/systemd/system/${{ env.SERVICE_NAME }}
            echo "Restart=always" | sudo tee -a /etc/systemd/system/${{ env.SERVICE_NAME }}
            echo "ExecStart=/usr/bin/docker compose up" | sudo tee -a /etc/systemd/system/${{ env.SERVICE_NAME }}
            echo "ExecStop=/usr/bin/docker compose down" | sudo tee -a /etc/systemd/system/${{ env.SERVICE_NAME }}
            echo "[Install]" | sudo tee -a /etc/systemd/system/${{ env.SERVICE_NAME }}
            echo "WantedBy=multi-user.target" | sudo tee -a /etc/systemd/system/${{ env.SERVICE_NAME }}

            sudo systemctl daemon-reload
            sudo systemctl enable ${{ env.SERVICE_NAME }}
            sudo systemctl restart ${{ env.SERVICE_NAME }}

            sudo docker image prune -f

            echo "Deployment finished successfully."
          EOF
        shell: bash